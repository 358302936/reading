<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:p="http://www.springframework.org/schema/p" 
    xmlns:tx="http://www.springframework.org/schema/tx"   
    xsi:schemaLocation="http://www.springframework.org/schema/beans    
                        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
                        http://www.springframework.org/schema/tx
				        http://www.springframework.org/schema/tx/spring-tx-4.3.xsd" >  
    
    <!-- 引入配置文件 -->  
    <bean id="propertyConfigurer"  
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="location" value="classpath:jdbc.properties" />  
    </bean>  
  
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"  
        destroy-method="close">  
        <property name="driverClassName" value="${db.driverClass}" />  
        <property name="url" value="${db.jdbcUrl}" />  
        <property name="username" value="${db.user}" />  
        <property name="password" value="${db.password}" />  
        <!-- 初始化连接大小 -->  
        <property name="initialSize" value="${db.initialPoolSize}"></property>  
        <!-- 连接池最大数量 -->  
        <property name="maxActive" value="${db.maxPoolSize}"></property>  
        <!-- 连接池最大空闲 -->  
        <property name="maxIdle" value="${db.maxPoolSize}"></property>  
        <!-- 连接池最小空闲 -->  
        <property name="minIdle" value="${db.minPoolSize}"></property>  
        <!-- 获取连接最大等待时间 -->  
        <property name="maxWait" value="${db.maxIdleTime}"></property>  
        
        <!-- 用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。 -->
        <property name="validationQuery" value="SELECT 'x'" />
        <!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->
		<property name="testWhileIdle" value="true" />
		<!-- 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。 -->
		<property name="testOnBorrow" value="false" />
		<!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
		<property name="testOnReturn" value="false" />
		
		<!-- 隔3600秒清理超过最小时间的空闲连接，并重新创建一个新连接 -->
        <property name="timeBetweenEvictionRunsMillis" value="30000" />
        <property name="minEvictableIdleTimeMillis" value="1800000" />  
    </bean>
    
    <bean id="dataSource1" class="org.apache.commons.dbcp.BasicDataSource"  
        destroy-method="close">  
        <property name="driverClassName" value="${db.driverClass1}" />  
        <property name="url" value="${db.jdbcUrl1}" />  
        <property name="username" value="${db.user1}" />  
        <property name="password" value="${db.password1}" />  
        <!-- 初始化连接大小 -->  
        <property name="initialSize" value="${db.initialPoolSize}"></property>  
        <!-- 连接池最大数量 -->  
        <property name="maxActive" value="${db.maxPoolSize}"></property>  
        <!-- 连接池最大空闲 -->  
        <property name="maxIdle" value="${db.maxPoolSize}"></property>  
        <!-- 连接池最小空闲 -->  
        <property name="minIdle" value="${db.minPoolSize}"></property>  
        <!-- 获取连接最大等待时间 -->  
        <property name="maxWait" value="${db.maxIdleTime}"></property>  
        
        <!-- 用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。 -->
        <property name="validationQuery" value="SELECT 'x'" />
        <!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->
		<property name="testWhileIdle" value="true" />
		<!-- 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。 -->
		<property name="testOnBorrow" value="false" />
		<!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
		<property name="testOnReturn" value="false" />
		
		<!-- 隔3600秒清理超过最小时间的空闲连接，并重新创建一个新连接 -->
        <property name="timeBetweenEvictionRunsMillis" value="30000" />
        <property name="minEvictableIdleTimeMillis" value="1800000" />  
				
    </bean>    
  
     <!-- 配置多数据源映射 -->
	<bean id="multipleDataSource" class="com.hx.reader.components.dataSource.MultipleDataSource" >
	     <property name="targetDataSources">
	         <map key-type="java.lang.String">
	             <entry value-ref="dataSource" key="dataSource"></entry>
	             <entry value-ref="dataSource1" key="dataSource1"></entry>
	         </map>
	     </property>
	     <!-- 默认数据源 -->
	     <property name="defaultTargetDataSource" ref="dataSource" />
	</bean>
  
    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="multipleDataSource" />  
        <!-- 自动扫描mapping.xml文件 -->  
        <property name="mapperLocations" value="classpath:mybatis-mapper/*.xml"></property>  
        <!-- 翻页插件 -->
        <property name="plugins">
		    <bean class="com.hx.reader.components.PageInterceptor"></bean>
		</property>
    </bean>  
    
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.hx.reader.model.dao" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
    </bean>  
    
     <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->  
    <bean id="transactionManager"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="multipleDataSource" />  
    </bean>  
       
        	
	<!-- 通知 -->	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
	  <tx:attributes>
	     <!-- 传播行为 -->
	    <tx:method name="save*" propagation="REQUIRED"/>
	    <tx:method name="insert*" propagation="REQUIRED"/>
	    <tx:method name="delete*" propagation="REQUIRED"/>
	    <tx:method name="update*" propagation="REQUIRED"/>
	    <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
	    <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
	  </tx:attributes>
	</tx:advice>
	
	
</beans>  